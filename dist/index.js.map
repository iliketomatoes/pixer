{"version":3,"file":null,"sources":["../lib/utils.js","../lib/index.js"],"sourcesContent":["// http://stackoverflow.com/a/24253254/1550955\nexport function colourGradientor(p, first_color, second_color) {\n    let w = p * 2 - 1;\n    let rgb_beginning = turnRgbIntoArray(first_color);\n    let rgb_end = turnRgbIntoArray(second_color);\n    let w1 = (w + 1) / 2.0;\n    let w2 = 1 - w1;\n    let rgb = [Math.round(rgb_beginning[0] * w1 + rgb_end[0] * w2),\n        Math.round(rgb_beginning[1] * w1 + rgb_end[1] * w2),\n        Math.round(rgb_beginning[2] * w1 + rgb_end[2] * w2)];\n    return turnArrayIntoRgb(rgb);\n}\n;\nexport function getBgColor(el) {\n    return window.getComputedStyle(el, null).getPropertyValue('background-color');\n}\n// http://stackoverflow.com/a/1183906/1550955\nexport function turnRgbIntoArray(rgb) {\n    const numberPattern = /\\d+/g;\n    return rgb.match(numberPattern).map(n => parseInt(n));\n}\nexport function turnArrayIntoRgb(rgbArr) {\n    return `rgb(${rgbArr[0]}, ${rgbArr[1]}, ${rgbArr[2]})`;\n}\nexport function getGradientWeight(lineNumber, totalLines) {\n    const startingEdge = lineNumber - 1;\n    const endingEdge = lineNumber;\n    const startingEdgeRatio = startingEdge / totalLines;\n    const endingEdgeRatio = endingEdge / totalLines;\n    let deltaRatio = endingEdgeRatio - startingEdgeRatio;\n    return {\n        even: startingEdgeRatio + (deltaRatio * 0.33),\n        odd: startingEdgeRatio + (deltaRatio * 0.66)\n    };\n}\n","import { colourGradientor, getBgColor, getGradientWeight } from './utils';\nvar Pixer;\n(function (Pixer) {\n    let idCursor = 0;\n    let IDs = [];\n    let defaults = {\n        minSquareWidth: 100,\n        stripes: 4\n    };\n    function init() {\n        let targets = document.querySelectorAll('canvas[data-pixer]');\n        for (let el of targets) {\n            if (el.tagName.toLowerCase() === 'canvas') {\n                // If elements are already initialized\n                if (el.hasAttribute('data-pixer-id'))\n                    continue;\n                setupCanvas(el);\n            }\n        }\n    }\n    Pixer.init = init;\n    function setupCanvas(el) {\n        let canvasSize = setSize(el);\n        // Stringify options so we can put them into the HTML data attribute\n        // let options = JSON.stringify(settings);\n        let defaultSettings = JSON.stringify(defaults);\n        let canvasId = 'pixer_' + idCursor;\n        el.setAttribute('data-pixer-id', canvasId);\n        el.setAttribute('data-pixer-opts', defaultSettings);\n        // Icrease the cursor\n        idCursor++;\n        // Store the id\n        IDs.push(canvasId);\n        paint(el, canvasSize, defaults);\n    }\n    function paint(canvas, canvasSize, options) {\n        let colors = setBgColor(canvas, canvasSize, options);\n        setSquares(canvas, canvasSize, colors, options);\n    }\n    function setBgColor(canvas, size, options) {\n        let colors = {\n            previousRGB: getBgColor(canvas.previousElementSibling),\n            nextRGB: getBgColor(canvas.nextElementSibling)\n        };\n        const ctx = canvas.getContext(\"2d\");\n        ctx.fillStyle = colors.previousRGB;\n        ctx.fillRect(0, 0, size.width, size.height / 2);\n        ctx.fillStyle = colors.nextRGB;\n        ctx.fillRect(0, size.height / 2, size.width, size.height / 2);\n        return colors;\n    }\n    function setSize(canvas) {\n        let canvasSize = getSize(canvas);\n        canvas.setAttribute('width', canvasSize.width.toString());\n        canvas.setAttribute('height', canvasSize.height.toString());\n        return canvasSize;\n    }\n    function getSize(canvas) {\n        let width = canvas.clientWidth;\n        let height = canvas.clientHeight;\n        return {\n            width: width,\n            height: height,\n            ratio: width / height\n        };\n    }\n    function getSettings(options) {\n        Object.assign(this.defaults, options);\n    }\n    function setSquares(canvas, size, colors, options) {\n        const stripes = options.stripes;\n        const squareDiagonal = size.height / (stripes - 1);\n        const squareSide = squareDiagonal / Math.SQRT2;\n        const squaresPerStripe = Math.round(size.width / squareDiagonal);\n        const ctx = canvas.getContext(\"2d\");\n        for (let j = 0; j < stripes; j++) {\n            let startingY = (squareDiagonal / 2) * j;\n            let gradientWeight = getGradientWeight(j + 1, stripes);\n            let color1 = colourGradientor(gradientWeight.odd, colors.nextRGB, colors.previousRGB);\n            let color2 = colourGradientor(gradientWeight.even, colors.nextRGB, colors.previousRGB);\n            for (let i = 0; i <= squaresPerStripe; i++) {\n                let startingX = (squareDiagonal / 2 * ((i * 2) + 1)) - (j % 2) * (squareDiagonal / 2);\n                ctx.save();\n                if (i % 2 === 0) {\n                    if (j % 2 === 0) {\n                        ctx.fillStyle = color1;\n                    }\n                    else {\n                        ctx.fillStyle = color2;\n                    }\n                }\n                else {\n                    if (j % 2 === 0) {\n                        ctx.fillStyle = color2;\n                    }\n                    else {\n                        ctx.fillStyle = color1;\n                    }\n                }\n                ctx.translate(startingX, startingY);\n                ctx.rotate(Math.PI / 4);\n                ctx.fillRect(0, 0, squareSide, squareSide);\n                ctx.restore();\n            }\n        }\n    }\n    class API {\n        constructor() { }\n        static get Instance() {\n            return this._instance || (this._instance = new this());\n        }\n    }\n    Pixer.API = API;\n})(Pixer || (Pixer = {}));\nfunction pixer() {\n    Pixer.init();\n    return Pixer.API;\n}\nexport default pixer;\n"],"names":["colourGradientor","p","first_color","second_color","w","rgb_beginning","turnRgbIntoArray","rgb_end","w1","w2","rgb","Math","round","turnArrayIntoRgb","getBgColor","el","window","getComputedStyle","getPropertyValue","numberPattern","match","map","parseInt","n","rgbArr","getGradientWeight","lineNumber","totalLines","startingEdge","endingEdge","startingEdgeRatio","endingEdgeRatio","deltaRatio","Pixer","idCursor","IDs","defaults","init","targets","document","querySelectorAll","tagName","toLowerCase","hasAttribute","setupCanvas","canvasSize","setSize","defaultSettings","JSON","stringify","canvasId","setAttribute","push","paint","canvas","options","colors","setBgColor","size","previousElementSibling","nextElementSibling","ctx","getContext","fillStyle","previousRGB","fillRect","width","height","nextRGB","getSize","toString","clientWidth","clientHeight","getSettings","assign","setSquares","stripes","squareDiagonal","squareSide","SQRT2","squaresPerStripe","j","startingY","gradientWeight","color1","odd","color2","even","i","startingX","save","translate","rotate","PI","restore","API","_instance","pixer"],"mappings":";;;;;;AAAA;AACA,AAAO,SAASA,gBAAT,CAA0BC,CAA1B,EAA6BC,WAA7B,EAA0CC,YAA1C,EAAwD;QACvDC,IAAIH,IAAI,CAAJ,GAAQ,CAAhB;QACII,gBAAgBC,iBAAiBJ,WAAjB,CAApB;QACIK,UAAUD,iBAAiBH,YAAjB,CAAd;QACIK,KAAK,CAACJ,IAAI,CAAL,IAAU,GAAnB;QACIK,KAAK,IAAID,EAAb;QACIE,MAAM,CAACC,KAAKC,KAAL,CAAWP,cAAc,CAAd,IAAmBG,EAAnB,GAAwBD,QAAQ,CAAR,IAAaE,EAAhD,CAAD,EACNE,KAAKC,KAAL,CAAWP,cAAc,CAAd,IAAmBG,EAAnB,GAAwBD,QAAQ,CAAR,IAAaE,EAAhD,CADM,EAENE,KAAKC,KAAL,CAAWP,cAAc,CAAd,IAAmBG,EAAnB,GAAwBD,QAAQ,CAAR,IAAaE,EAAhD,CAFM,CAAV;WAGOI,iBAAiBH,GAAjB,CAAP;;AAEJ;AACA,AAAO,SAASI,UAAT,CAAoBC,EAApB,EAAwB;WACpBC,OAAOC,gBAAP,CAAwBF,EAAxB,EAA4B,IAA5B,EAAkCG,gBAAlC,CAAmD,kBAAnD,CAAP;;;AAGJ,AAAO,SAASZ,gBAAT,CAA0BI,GAA1B,EAA+B;QAC5BS,gBAAgB,MAAtB;WACOT,IAAIU,KAAJ,CAAUD,aAAV,EAAyBE,GAAzB,CAA6B;eAAKC,SAASC,CAAT,CAAL;KAA7B,CAAP;;AAEJ,AAAO,SAASV,gBAAT,CAA0BW,MAA1B,EAAkC;oBACvBA,OAAO,CAAP,CAAd,UAA4BA,OAAO,CAAP,CAA5B,UAA0CA,OAAO,CAAP,CAA1C;;AAEJ,AAAO,SAASC,iBAAT,CAA2BC,UAA3B,EAAuCC,UAAvC,EAAmD;QAChDC,eAAeF,aAAa,CAAlC;QACMG,aAAaH,UAAnB;QACMI,oBAAoBF,eAAeD,UAAzC;QACMI,kBAAkBF,aAAaF,UAArC;QACIK,aAAaD,kBAAkBD,iBAAnC;WACO;cACGA,oBAAqBE,aAAa,IADrC;aAEEF,oBAAqBE,aAAa;KAF3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BJ,IAAIC,KAAJ;AACA,CAAC,UAAUA,KAAV,EAAiB;QACVC,WAAW,CAAf;QACIC,MAAM,EAAV;QACIC,cAAW;wBACK,GADL;iBAEF;KAFb;aAISC,IAAT,GAAgB;YACRC,UAAUC,SAASC,gBAAT,CAA0B,oBAA1B,CAAd;;;;;;iCACeF,OAAf,8HAAwB;oBAAfvB,EAAe;;oBAChBA,GAAG0B,OAAH,CAAWC,WAAX,OAA6B,QAAjC,EAA2C;;wBAEnC3B,GAAG4B,YAAH,CAAgB,eAAhB,CAAJ,EACI;gCACQ5B,EAAZ;;;;;;;;;;;;;;;;;;UAINsB,IAAN,GAAaA,IAAb;aACSO,WAAT,CAAqB7B,EAArB,EAAyB;YACjB8B,aAAaC,QAAQ/B,EAAR,CAAjB;;;YAGIgC,kBAAkBC,KAAKC,SAAL,CAAeb,WAAf,CAAtB;YACIc,WAAW,WAAWhB,QAA1B;WACGiB,YAAH,CAAgB,eAAhB,EAAiCD,QAAjC;WACGC,YAAH,CAAgB,iBAAhB,EAAmCJ,eAAnC;;;;YAIIK,IAAJ,CAASF,QAAT;cACMnC,EAAN,EAAU8B,UAAV,EAAsBT,WAAtB;;aAEKiB,KAAT,CAAeC,MAAf,EAAuBT,UAAvB,EAAmCU,OAAnC,EAA4C;YACpCC,SAASC,WAAWH,MAAX,EAAmBT,UAAnB,EAA+BU,OAA/B,CAAb;mBACWD,MAAX,EAAmBT,UAAnB,EAA+BW,MAA/B,EAAuCD,OAAvC;;aAEKE,UAAT,CAAoBH,MAApB,EAA4BI,IAA5B,EAAkCH,OAAlC,EAA2C;YACnCC,SAAS;yBACI1C,WAAWwC,OAAOK,sBAAlB,CADJ;qBAEA7C,WAAWwC,OAAOM,kBAAlB;SAFb;YAIMC,MAAMP,OAAOQ,UAAP,CAAkB,IAAlB,CAAZ;YACIC,SAAJ,GAAgBP,OAAOQ,WAAvB;YACIC,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBP,KAAKQ,KAAxB,EAA+BR,KAAKS,MAAL,GAAc,CAA7C;YACIJ,SAAJ,GAAgBP,OAAOY,OAAvB;YACIH,QAAJ,CAAa,CAAb,EAAgBP,KAAKS,MAAL,GAAc,CAA9B,EAAiCT,KAAKQ,KAAtC,EAA6CR,KAAKS,MAAL,GAAc,CAA3D;eACOX,MAAP;;aAEKV,OAAT,CAAiBQ,MAAjB,EAAyB;YACjBT,aAAawB,QAAQf,MAAR,CAAjB;eACOH,YAAP,CAAoB,OAApB,EAA6BN,WAAWqB,KAAX,CAAiBI,QAAjB,EAA7B;eACOnB,YAAP,CAAoB,QAApB,EAA8BN,WAAWsB,MAAX,CAAkBG,QAAlB,EAA9B;eACOzB,UAAP;;aAEKwB,OAAT,CAAiBf,MAAjB,EAAyB;YACjBY,QAAQZ,OAAOiB,WAAnB;YACIJ,SAASb,OAAOkB,YAApB;eACO;mBACIN,KADJ;oBAEKC,MAFL;mBAGID,QAAQC;SAHnB;;aAMKM,WAAT,CAAqBlB,OAArB,EAA8B;eACnBmB,MAAP,CAAc,KAAKtC,QAAnB,EAA6BmB,OAA7B;;aAEKoB,UAAT,CAAoBrB,MAApB,EAA4BI,IAA5B,EAAkCF,MAAlC,EAA0CD,OAA1C,EAAmD;YACzCqB,UAAUrB,QAAQqB,OAAxB;YACMC,iBAAiBnB,KAAKS,MAAL,IAAeS,UAAU,CAAzB,CAAvB;YACME,aAAaD,iBAAiBlE,KAAKoE,KAAzC;YACMC,mBAAmBrE,KAAKC,KAAL,CAAW8C,KAAKQ,KAAL,GAAaW,cAAxB,CAAzB;YACMhB,MAAMP,OAAOQ,UAAP,CAAkB,IAAlB,CAAZ;aACK,IAAImB,IAAI,CAAb,EAAgBA,IAAIL,OAApB,EAA6BK,GAA7B,EAAkC;gBAC1BC,YAAaL,iBAAiB,CAAlB,GAAuBI,CAAvC;gBACIE,iBAAiB1D,kBAAkBwD,IAAI,CAAtB,EAAyBL,OAAzB,CAArB;gBACIQ,SAASpF,iBAAiBmF,eAAeE,GAAhC,EAAqC7B,OAAOY,OAA5C,EAAqDZ,OAAOQ,WAA5D,CAAb;gBACIsB,SAAStF,iBAAiBmF,eAAeI,IAAhC,EAAsC/B,OAAOY,OAA7C,EAAsDZ,OAAOQ,WAA7D,CAAb;iBACK,IAAIwB,IAAI,CAAb,EAAgBA,KAAKR,gBAArB,EAAuCQ,GAAvC,EAA4C;oBACpCC,YAAaZ,iBAAiB,CAAjB,IAAuBW,IAAI,CAAL,GAAU,CAAhC,CAAD,GAAwCP,IAAI,CAAL,IAAWJ,iBAAiB,CAA5B,CAAvD;oBACIa,IAAJ;oBACIF,IAAI,CAAJ,KAAU,CAAd,EAAiB;wBACTP,IAAI,CAAJ,KAAU,CAAd,EAAiB;4BACTlB,SAAJ,GAAgBqB,MAAhB;qBADJ,MAGK;4BACGrB,SAAJ,GAAgBuB,MAAhB;;iBALR,MAQK;wBACGL,IAAI,CAAJ,KAAU,CAAd,EAAiB;4BACTlB,SAAJ,GAAgBuB,MAAhB;qBADJ,MAGK;4BACGvB,SAAJ,GAAgBqB,MAAhB;;;oBAGJO,SAAJ,CAAcF,SAAd,EAAyBP,SAAzB;oBACIU,MAAJ,CAAWjF,KAAKkF,EAAL,GAAU,CAArB;oBACI5B,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBa,UAAnB,EAA+BA,UAA/B;oBACIgB,OAAJ;;;;;QAINC,GAxGQ;uBAyGI;;;;;;gCACQ;uBACX,KAAKC,SAAL,KAAmB,KAAKA,SAAL,GAAiB,IAAI,IAAJ,EAApC,CAAP;;;;;;UAGFD,GAAN,GAAYA,GAAZ;CA9GJ,EA+GG9D,UAAUA,QAAQ,EAAlB,CA/GH;AAgHA,SAASgE,KAAT,GAAiB;UACP5D,IAAN;WACOJ,MAAM8D,GAAb;CAEJ;;;;"}